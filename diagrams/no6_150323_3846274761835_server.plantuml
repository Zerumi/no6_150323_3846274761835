@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class AddCommand {
  + AddCommand(): 
  + execute(String[]): void
   name: String
   obj: Route
   args: String
   descr: String
   response: CommandStatusResponse
}
class AddIfMaxCommand {
  + AddIfMaxCommand(): 
  + execute(String[]): void
   name: String
   obj: Route
   args: String
   descr: String
   response: CommandStatusResponse
}
class AddIfMinCommand {
  + AddIfMinCommand(): 
  + execute(String[]): void
   name: String
   obj: Route
   args: String
   descr: String
   response: CommandStatusResponse
}
class ArgumentCommandClientRequestWorker<T, Y> {
  + ArgumentCommandClientRequestWorker(): 
  + workWithRequest(ServerRequest): void
}
interface ArgumentConsumer<T> << interface >> {
   obj: T
}
interface BaseCommand << interface >> {
  + execute(String[]): void
   name: String
   args: String
   descr: String
   response: CommandStatusResponse
}
interface BaseReader << interface >> {
  + readFromFile(String): LinkedHashMap<String[], String>
}
class BaseRequestWorker {
  + BaseRequestWorker(): 
  + workWithRequest(ServerRequest): void
}
interface BaseWriter << interface >> {
  + writeToFile(String, LinkedHashMap<String[], String>): void
}
class CallerBack {
  + CallerBack(InetAddress, int): 
  + hashCode(): int
  + toString(): String
  + equals(Object): boolean
   address: InetAddress
   port: int
}
class ClearCommand {
  + ClearCommand(): 
  + execute(String[]): void
   name: String
   response: CommandStatusResponse
   descr: String
}
class ClientHandler {
  ~ availability: boolean
  + actionPerformed(ActionEvent): void
  + restartTimer(): void
  + approveCallerBack(CallerBack): void
  + allowNewCallerBack(): void
   instance: ClientHandler
   availability: boolean
}
interface CollectionHandler<T, E> << interface >> {
  + getMax(Comparator<E>): E
  + clearCollection(): void
  + sort(): void
  + addElementToCollection(E): void
  + validateElements(): void
  + getMin(Comparator<E>): E
   lastElement: E
   sorted: T
   firstOrNew: E
   collection: T
   initDate: Date
}
class CommandClientRequestWorker {
  + CommandClientRequestWorker(): 
  + workWithRequest(ServerRequest): void
}
class CommandConfigureRequestWorker {
  + CommandConfigureRequestWorker(): 
  + workWithRequest(ServerRequest): void
}
class CommandConfigureResponseSender {
  + CommandConfigureResponseSender(): 
  + sendResponse(CommandDescriptionsResponse, ServerConnection, CallerBack): void
}
class CommandExporter {
  + CommandExporter(): 
   commandsToExport: ArrayList<CommandDescription>
}
class CommandManager {
  + CommandManager(): 
  ~ commands: LinkedHashMap<String, BaseCommand>
  + executeCommand(CommandClientRequest, CallerBack, ServerConnection): void
  + fromDescription(CommandDescription): BaseCommand
   commands: LinkedHashMap<String, BaseCommand>
}
class CommandResponseSender {
  + CommandResponseSender(): 
  + sendResponse(CommandStatusResponse, ServerConnection, CallerBack): void
}
class CountGreaterThanDistanceCommand {
  + CountGreaterThanDistanceCommand(): 
  + execute(String[]): void
   name: String
   args: String
   descr: String
   response: CommandStatusResponse
}
class DatagramServerConnection {
  + sendData(byte[], InetAddress, int): void
  + listenAndGetData(): StatusRequest
}
class DatagramServerConnectionFactory {
  + DatagramServerConnectionFactory(): 
  + initializeServer(int): ServerConnection
}
class DateEditor {
  + DateEditor(): 
  + supportsCustomEditor(): boolean
  + paintValue(Graphics, Rectangle): void
  + addPropertyChangeListener(PropertyChangeListener): void
  + removePropertyChangeListener(PropertyChangeListener): void
   asText: String
   customEditor: Component
   javaInitializationString: String
   paintable: boolean
   value: Object
   tags: String[]
}
class ExecuteScriptCommand {
  + ExecuteScriptCommand(): 
  ~ response: CommandStatusResponse
  + execute(String[]): void
   name: String
   args: String
   descr: String
   response: CommandStatusResponse
}
class ExitCommand {
  + ExitCommand(): 
  + execute(String[]): void
   name: String
   response: CommandStatusResponse
   descr: String
}
class HelpCommand {
  + HelpCommand(): 
  + execute(String[]): void
   name: String
   response: CommandStatusResponse
   descr: String
}
class InfoCommand {
  + InfoCommand(): 
  + execute(String[]): void
   name: String
   response: CommandStatusResponse
   descr: String
}
class InvalidRequestException {
  + InvalidRequestException(String): 
}
class Loader<T, E> {
  + Loader(Class<T>, Class<E>): 
  + loadFromXMLbyEnvKey(String): T
  + setupConverter(Class<?>, Class<PropertyEditor>): void
  + loadFromFile(String, BaseReader): T
}
class Main {
  + Main(): 
  + main(String[]): void
}
class MinByCreationDateCommand {
  + MinByCreationDateCommand(): 
  + execute(String[]): void
   name: String
   response: CommandStatusResponse
   descr: String
}
class NotAvailableException {
  + NotAvailableException(CallerBack): 
   deniedClient: CallerBack
}
class PrintFieldDistanceAscendingCommand {
  + PrintFieldDistanceAscendingCommand(): 
  + execute(String[]): void
   name: String
   response: CommandStatusResponse
   descr: String
}
class RemoveByIdCommand {
  + RemoveByIdCommand(): 
  + execute(String[]): void
   name: String
   args: String
   descr: String
   response: CommandStatusResponse
}
class RemoveGreaterCommand {
  + RemoveGreaterCommand(): 
  + execute(String[]): void
   name: String
   obj: Route
   args: String
   descr: String
   response: CommandStatusResponse
}
class RequestReader {
  + RequestReader(InputStream): 
  + readObject(): BaseRequest
}
interface RequestWorker << interface >> {
  + workWithRequest(ServerRequest): void
}
class RequestWorkerManager {
  + RequestWorkerManager(): 
  + workWithRequest(ServerRequest): void
}
class ResponseSender {
  + ResponseSender(): 
  + sendResponse(BaseResponse, ServerConnection, CallerBack): void
}
class RouteComparator {
  + RouteComparator(): 
  + compare(Route, Route): int
}
class RouteCreationDateComparator {
  + RouteCreationDateComparator(): 
  + compare(Route, Route): int
}
class RouteDistanceComparator {
  + RouteDistanceComparator(): 
  + compare(Route, Route): int
}
class RouteIDHandler {
  + RouteIDHandler(): 
   instance: RouteIDHandler
   nextID: Long
}
class RoutesHandler {
  + getMax(Comparator<Route>): Route
  + addElementToCollection(Route): void
  + validateElements(): void
  + clearCollection(): void
  + getMin(Comparator<Route>): Route
  + sort(): void
   sorted: HashSet<Route>
   firstOrNew: Route
   instance: RoutesHandler
   collection: HashSet<Route>
   initDate: Date
   lastElement: Route
}
class SaveCommand {
  + SaveCommand(): 
  + execute(String[]): void
   name: String
   response: CommandStatusResponse
   descr: String
}
class Saver<T, E> {
  + Saver(Class<E>): 
  + saveCollection(T, String): void
}
interface ServerConnection << interface >> {
  + sendData(byte[], InetAddress, int): void
  + listenAndGetData(): StatusRequest
}
interface ServerConnectionFactory << interface >> {
  + initializeServer(int): ServerConnection
}
class ServerRequest {
  + ServerRequest(BaseRequest, CallerBack, ServerConnection): 
   from: CallerBack
   userRequest: BaseRequest
   connection: ServerConnection
}
class ShowCommand {
  + ShowCommand(): 
  + execute(String[]): void
   name: String
   response: CommandStatusResponse
   descr: String
}
class StatusRequest {
  + StatusRequest(): 
   inputStream: InputStream
   code: int
   callerBack: CallerBack
}
class StatusRequestBuilder {
  + build(): StatusRequest
  + initialize(): StatusRequestBuilder
   objectStream: InputStream
   code: int
   callerBack: CallerBack
}
class UnknownCommandException {
  + UnknownCommandException(String): 
}
class UnsupportedRequestException {
  + UnsupportedRequestException(String): 
}
class UpdateCommand {
  + UpdateCommand(): 
  + execute(String[]): void
   name: String
   obj: Route
   args: String
   descr: String
   response: CommandStatusResponse
}
class Wrapper {
  + Wrapper(): 
  + isWrapperType(Class<?>): boolean
}
class XMLReader {
  + XMLReader(): 
  + readFromFile(String): LinkedHashMap<String[], String>
}
class XMLWriter {
  + XMLWriter(): 
  + writeToFile(String, LinkedHashMap<String[], String>): void
}

AddCommand                          -[#008200,dashed]-^  ArgumentConsumer                   
AddCommand                          -[#008200,dashed]-^  BaseCommand                        
AddIfMaxCommand                     -[#008200,dashed]-^  ArgumentConsumer                   
AddIfMaxCommand                     -[#008200,dashed]-^  BaseCommand                        
AddIfMaxCommand                     -[#595959,dashed]->  RouteDistanceComparator            : "«create»"
AddIfMinCommand                     -[#008200,dashed]-^  ArgumentConsumer                   
AddIfMinCommand                     -[#008200,dashed]-^  BaseCommand                        
AddIfMinCommand                     -[#595959,dashed]->  RouteDistanceComparator            : "«create»"
ArgumentCommandClientRequestWorker  -[#595959,dashed]->  CommandManager                     : "«create»"
ArgumentCommandClientRequestWorker  -[#008200,dashed]-^  RequestWorker                      
BaseRequestWorker                   -[#008200,dashed]-^  RequestWorker                      
ClearCommand                        -[#008200,dashed]-^  BaseCommand                        
ClientHandler                      "1" *-[#595959,plain]-> "callerBack\n1" CallerBack                         
ClientHandler                       -[#595959,dashed]->  NotAvailableException              : "«create»"
CommandClientRequestWorker          -[#595959,dashed]->  CommandManager                     : "«create»"
CommandClientRequestWorker          -[#008200,dashed]-^  RequestWorker                      
CommandConfigureRequestWorker       -[#008200,dashed]-^  RequestWorker                      
CommandManager                      -[#595959,dashed]->  AddCommand                         : "«create»"
CommandManager                      -[#595959,dashed]->  AddIfMaxCommand                    : "«create»"
CommandManager                      -[#595959,dashed]->  AddIfMinCommand                    : "«create»"
CommandManager                     "1" *-[#595959,plain]-> "commands\n*" BaseCommand                        
CommandManager                      -[#595959,dashed]->  ClearCommand                       : "«create»"
CommandManager                      -[#595959,dashed]->  CountGreaterThanDistanceCommand    : "«create»"
CommandManager                      -[#595959,dashed]->  ExecuteScriptCommand               : "«create»"
CommandManager                      -[#595959,dashed]->  ExitCommand                        : "«create»"
CommandManager                      -[#595959,dashed]->  HelpCommand                        : "«create»"
CommandManager                      -[#595959,dashed]->  InfoCommand                        : "«create»"
CommandManager                      -[#595959,dashed]->  MinByCreationDateCommand           : "«create»"
CommandManager                      -[#595959,dashed]->  PrintFieldDistanceAscendingCommand : "«create»"
CommandManager                      -[#595959,dashed]->  RemoveByIdCommand                  : "«create»"
CommandManager                      -[#595959,dashed]->  RemoveGreaterCommand               : "«create»"
CommandManager                      -[#595959,dashed]->  SaveCommand                        : "«create»"
CommandManager                      -[#595959,dashed]->  ShowCommand                        : "«create»"
CommandManager                      -[#595959,dashed]->  UnknownCommandException            : "«create»"
CommandManager                      -[#595959,dashed]->  UpdateCommand                      : "«create»"
CountGreaterThanDistanceCommand     -[#008200,dashed]-^  BaseCommand                        
DatagramServerConnection            -[#595959,dashed]->  CallerBack                         : "«create»"
DatagramServerConnection            -[#008200,dashed]-^  ServerConnection                   
DatagramServerConnectionFactory     -[#595959,dashed]->  DatagramServerConnection           : "«create»"
DatagramServerConnectionFactory     -[#008200,dashed]-^  ServerConnectionFactory            
ExecuteScriptCommand                -[#008200,dashed]-^  BaseCommand                        
ExitCommand                         -[#008200,dashed]-^  BaseCommand                        
ExitCommand                         -[#595959,dashed]->  SaveCommand                        : "«create»"
HelpCommand                         -[#008200,dashed]-^  BaseCommand                        
HelpCommand                         -[#595959,dashed]->  CommandManager                     : "«create»"
InfoCommand                         -[#008200,dashed]-^  BaseCommand                        
Loader                              -[#595959,dashed]->  XMLReader                          : "«create»"
Main                                -[#595959,dashed]->  DatagramServerConnectionFactory    : "«create»"
Main                                -[#595959,dashed]->  Loader                             : "«create»"
Main                                -[#595959,dashed]->  RequestReader                      : "«create»"
Main                                -[#595959,dashed]->  RequestWorkerManager               : "«create»"
Main                                -[#595959,dashed]->  SaveCommand                        : "«create»"
Main                                -[#595959,dashed]->  ServerRequest                      : "«create»"
MinByCreationDateCommand            -[#008200,dashed]-^  BaseCommand                        
MinByCreationDateCommand            -[#595959,dashed]->  RouteCreationDateComparator        : "«create»"
NotAvailableException              "1" *-[#595959,plain]-> "deniedClient\n1" CallerBack                         
PrintFieldDistanceAscendingCommand  -[#008200,dashed]-^  BaseCommand                        
RemoveByIdCommand                   -[#008200,dashed]-^  BaseCommand                        
RemoveGreaterCommand                -[#008200,dashed]-^  ArgumentConsumer                   
RemoveGreaterCommand                -[#008200,dashed]-^  BaseCommand                        
RemoveGreaterCommand                -[#595959,dashed]->  RouteDistanceComparator            : "«create»"
RequestWorkerManager                -[#595959,dashed]->  ArgumentCommandClientRequestWorker : "«create»"
RequestWorkerManager                -[#595959,dashed]->  BaseRequestWorker                  : "«create»"
RequestWorkerManager                -[#595959,dashed]->  CommandClientRequestWorker         : "«create»"
RequestWorkerManager                -[#595959,dashed]->  CommandConfigureRequestWorker      : "«create»"
RequestWorkerManager               "1" *-[#595959,plain]-> "workers\n*" RequestWorker                      
RequestWorkerManager                -[#595959,dashed]->  UnsupportedRequestException        : "«create»"
RouteIDHandler                      -[#595959,dashed]->  RouteComparator                    : "«create»"
RoutesHandler                       -[#008200,dashed]-^  CollectionHandler                  
RoutesHandler                       -[#595959,dashed]->  RouteComparator                    : "«create»"
SaveCommand                         -[#008200,dashed]-^  BaseCommand                        
SaveCommand                         -[#595959,dashed]->  Saver                              : "«create»"
Saver                               -[#595959,dashed]->  XMLWriter                          : "«create»"
ServerRequest                      "1" *-[#595959,plain]-> "from\n1" CallerBack                         
ServerRequest                      "1" *-[#595959,plain]-> "connection\n1" ServerConnection                   
ShowCommand                         -[#008200,dashed]-^  BaseCommand                        
StatusRequest                      "1" *-[#595959,plain]-> "callerBack\n1" CallerBack                         
StatusRequestBuilder               "1" *-[#595959,plain]-> "result\n1" StatusRequest                      
StatusRequestBuilder                -[#595959,dashed]->  StatusRequest                      : "«create»"
UpdateCommand                       -[#008200,dashed]-^  ArgumentConsumer                   
UpdateCommand                       -[#008200,dashed]-^  BaseCommand                        
Wrapper                             +-[#820000,plain]-  Saver                              
XMLReader                           -[#008200,dashed]-^  BaseReader                         
XMLWriter                           -[#008200,dashed]-^  BaseWriter                         
@enduml
